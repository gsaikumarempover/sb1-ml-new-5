type User {
    id: ID!
    username: String!
    email: String!
    roles: [Role!]!
    projects: [Project!]!
}

type Role {
    id: ID!
    name: String!
}

type Project {
    id: ID!
    name: String!
    description: String
    createdAt: String!
    updatedAt: String!
    owner: User!
}

type AuthResponse {
    token: String!
    user: User!
}

input LoginInput {
    username: String!
    password: String!
}

input RegisterInput {
    username: String!
    email: String!
    password: String!
}

input ProjectInput {
    name: String!
    description: String
}

input UserUpdateInput {
    username: String
    email: String
}

type Query {
    # User queries
    users: [User!]!
    user(id: ID!): User
    me: User!
    
    # Project queries
    projects: [Project!]!
    project(id: ID!): Project
    myProjects: [Project!]!
}

type Mutation {
    # Auth mutations
    login(input: LoginInput!): AuthResponse!
    register(input: RegisterInput!): AuthResponse!
    
    # User mutations
    updateUser(id: ID!, input: UserUpdateInput!): User!
    deleteUser(id: ID!): Boolean!
    
    # Project mutations
    createProject(input: ProjectInput!): Project!
    updateProject(id: ID!, input: ProjectInput!): Project!
    deleteProject(id: ID!): Boolean!
}